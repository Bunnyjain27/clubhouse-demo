#!/usr/bin/env python3

import ast
import csv
import glob
import os
import sys


QUESTS_PATH = os.path.join('eosclubhouse', 'quests')
CSV_PATH = os.path.join('data', 'quests_strings')


class Analyzer(ast.NodeVisitor):
    _check_methods = ['show_message', 'show_hints_message', 'show_confirm_message',
                      'wait_confirm', 'show_choices_message']

    def __init__(self):
        self.class_name = None
        self.message_ids = set()

    def visit_ClassDef(self, node):
        if node.bases[0].id == 'Quest':
            self.class_name = node.name.upper()
        self.generic_visit(node)

    def visit_Call(self, node):
        if isinstance(node.func, ast.Attribute):
            if node.func.attr in self._check_methods:
                if isinstance(node.args[0], ast.Str):
                    self.message_ids.add(node.args[0].s)

        self.generic_visit(node)

    @property
    def prefix(self):
        return self.class_name + '_'

    def _prefix_message(self, message_id):
        if message_id.startswith(self.prefix):
            return message_id
        return self.prefix + message_id

    def get_message_ids(self):
        result = map(self._prefix_message, self.message_ids)
        return set(result)


def import_csv_ids(csv_path):
    imported_ids = set()
    with open(csv_path, 'r') as csv_file:
        reader = csv.reader(csv_file)
        for row in reader:
            imported_ids.add(row[0])

    return imported_ids


def get_quest_ids(quest_path):
    with open(quest_path, 'r') as quest_source:
        tree = ast.parse(quest_source.read())
        analyzer = Analyzer()
        analyzer.visit(tree)
        return analyzer.get_message_ids()


def main():
    imported_ids = set()
    success = True

    for csv_path in glob.glob(os.path.join(CSV_PATH, '*.csv')):
        imported_ids.update(import_csv_ids(csv_path))

    for quest_path in glob.glob(os.path.join(QUESTS_PATH, '*', '*.py')):
        message_ids = get_quest_ids(quest_path)
        if not message_ids.issubset(imported_ids):
            success = False
            output_message = 'Error: Quest {} is referring inexisting messages: {}'
            print(output_message.format(
                quest_path,
                ', '.join(message_ids.difference(imported_ids)),
            ))

    return 0 if success else 1


return_code = main()
sys.exit(return_code)
